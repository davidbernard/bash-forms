This file is commandforms.def, from which is created commandforms.c.
It implements the builtins "fieldspec","formspec" and "form" in Bash.

Copyright (C) 1999-2013 Free Software Foundation, Inc.

This file is part of GNU Bash, the Bourne Again SHell.

Bash is free software; you can redistribute it and/or modify it under
the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2, or (at your option) any later
version.

Bash is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License
for more details.

You should have received a copy of the GNU General Public License
along with Bash.  If not, see <http://www.gnu.org/licenses/>.

$PRODUCES commandforms.c


#include <config.h>


#include "bashtypes.h"

#include <stdio.h>

#if defined (HAVE_UNISTD_H)
#  include <unistd.h>
#endif

#include "../bashansi.h"

#include "../shell.h"
#include "../builtins.h"
#include <commandforms/commandforms.h>

#include "common.h"
#include "bashgetopt.h"

#include "builtext.h"

#define STRDUP(x) ((x) ? savestring (x) : (char *)NULL)

/* Forward references */
static int fieldspec_printitem __P ((BUCKET_CONTENTS *));
static int fieldspec_removeall __P ((WORD_LIST *));
static void fieldspec_printall __P ((void));
static int fieldspec_printlist __P ((WORD_LIST *));

static void formspec_printall __P ((void));
static int formspec_printlist __P ((WORD_LIST *));
static int formspec_printitem __P ((BUCKET_CONTENTS *));
static int formspec_removeall __P ((WORD_LIST *));

static int build_displaylevel __P ((char *, DISPLAYLEVEL **, WORD_LIST **));

/* Static state variables */
static CF_EXECUTION_MODE cf_execution_mode = CF_MODE_DISPLAY;
static CF_EDIT_MODE cf_edit_mode = CF_MODE_FORM;

/* Helper function called to print a field spec from a walk
  of field spec hash */
static int
fieldspec_printitem (item)
     BUCKET_CONTENTS *item;
{
  FIELDSPEC *cs;
  char *cmd;

  cmd = item->key;
  cs = (FIELDSPEC *) item->data;

  return (fieldspec_print (cmd, cs));
}

/* Print all fieldspecs by walking hash */
static void
fieldspec_printall ()
{
  fieldspecs_walk (fieldspec_printitem);
}

/* Print all fieldspecs in a list */
static int
fieldspec_printlist (list)
     WORD_LIST *list;
{
  WORD_LIST *l;
  FIELDSPEC *cs;
  int ret;

  for (ret = EXECUTION_SUCCESS, l = list; l; l = l->next)
    {
      cs = fieldspec_search (l->word->word);
      if (cs)
        fieldspec_print (l->word->word, cs);
      else
        {
          builtin_error ("%s: no such fieldspec specification",
                         l->word->word);
          ret = EXECUTION_FAILURE;
        }
    }
  return (ret);
}

/* Remove all fieldspecs */
static int
fieldspec_removeall (list)
     WORD_LIST *list;
{

  WORD_LIST *l;
  int ret;

  for (ret = EXECUTION_SUCCESS, l = list; l; l = l->next)
    {
      if (fieldspec_remove (l->word->word) == 0)
        {
          builtin_error ("%s: no fieldspec specification or fieldspec in use",
                         l->word->word);
          ret = EXECUTION_FAILURE;
        }
    }
  return ret;
}

$BUILTIN fieldspec
$DEPENDS_ON COMMAND_FORMS
$FUNCTION fieldspec_builtin
$SHORT_DOC field_spec [-pr] +label <label> 
 +fieldtype flag|flagwithvalue|positional|uptolast|last|rest 
 [ +compspec <compspec name> ] 
 [+separator <separator to next field> ]
 [+displaylevels <level 1> <level 2> ...]
 [+hinttext <hint text>] [+helptext <help text>] 
 <fieldspec name> ...
This command defines a type of field for display on a command form defined using the command formspec.

Options:
+label     The field label
+fieldtype The type of the field
    flag           A flag that is present or not present
    flagwithvalue  A flag with a value argument
    positional     An argument identified by its position in the argument list
    uptolast       The arguments before the last argument
    last           The last argument
    rest           Any additional arguments

+compspec  A command completion specification for the field
+separator String used to separate fields. If two or more fields are adjacent and
           have same seperator then insert separator.
+flag      The flag string to prefix the field on the command line.
+displayvalues
           List of strings to display for selection by the user.
+values    List of corresponding strings to be inserted into the command line.
+hinttext  Text to be displayed on the status line when the field is selected
+helptext  Help text to be displayed with help on this field is required

$END

/* Add, remove, and display field specifiers. */
int
fieldspec_builtin (list)
     WORD_LIST *list;
{
  FIELDSPEC *cs;
  WORD_LIST *l;
  WORD_LIST *ll;
  char *ip;
  char *op;
  int i;

  char *fieldtype;
  char *hinttext;
  char *helptext;
  char *label;
  char *compspec;
  char *separator;
  char *flag;

  char **values;
  int valueslength;
  int valuescount;
  WORD_LIST *valueslist;

  char **displayvalues;
  int displayvalueslength;
  int displayvaluescount;
  WORD_LIST *displayvalueslist;


  fieldtype = NULL;
  hinttext = NULL;
  helptext = NULL;
  label = NULL;
  values = NULL;
  displayvalues = NULL;
  valueslist = NULL;
  displayvalueslist = NULL;

  valuescount = 0;
  displayvaluescount = 0;
  valueslength = 0;
  displayvalueslength = 0;
  compspec = NULL;
  separator = NULL;
  flag = NULL;

  /* fieldspec */
  if (list == 0)
    {
      fieldspec_printall ();
      return (EXECUTION_SUCCESS);
    }

  /* fieldspec -p <fieldspec name> ... */
  if (strcmp ("-p", list->word->word) == 0)
    {
      l = list->next;
      if (l == 0)
        {
          fieldspec_printall ();
          return (EXECUTION_SUCCESS);
        }
      else
        return (fieldspec_printlist (l));

    }
  /* fieldspec -r <fieldspec name > ... */
  else if (strcmp ("-r", list->word->word) == 0)
    {
      l = list->next;
      if (l == 0)
        {
          fieldspecs_flush ();
          return (EXECUTION_SUCCESS);
        }
      else
        return (fieldspec_removeall (l));
    }
  else
    {
      for (l = list; l;)
        {
          if (strcmp ("--", l->word->word) == 0)
            {
              l = l->next;
              break;
            }
#define CHECKFORSTRINGARG(arg, variable)\
     else if (strcmp (arg, l->word->word) == 0) \
     { \
       if ( l->next) \
       { \
         variable = savestring (l->next->word->word); \
         l = l->next; \
       } \
       else \
       { \
         builtin_error ("%s: missing argument", list_optarg); \
         goto usage_error; \
       } \
     }


          CHECKFORSTRINGARG ("+label", label)
            CHECKFORSTRINGARG ("+fieldtype", fieldtype)
            CHECKFORSTRINGARG ("+compspec", compspec)
            CHECKFORSTRINGARG ("+separator", separator)
            CHECKFORSTRINGARG ("+flag", flag)
          else if (strcmp ("+values", l->word->word) == 0)
            {
              valueslist = l->next;
              valueslength = 0;
              valuescount = 0;
              /* Determine the length the values string will need 
                 Note: Last word is always command */
              for (ll = l->next; ll->next; ll = ll->next)
                {
                  if (ll->word->word[0] == '+')
                    {
                      l = ll;
                      goto next;
                    }
                  else
                    {
                      valueslength += strlen (ll->word->word) + 1;
                      valuescount++;
                    }
                }
              l = ll;
              goto next;
            }
          else if (strcmp ("+displayvalues", l->word->word) == 0)
            {
              displayvalueslist = l->next;
              displayvalueslength = 0;
              displayvaluescount = 0;
              /* Determine the length the values string will need 
                 Note: Last word is always command */
              for (ll = l->next; ll->next; ll = ll->next)
                {
                  if (ll->word->word[0] == '+')
                    {
                      l = ll;
                      goto next;
                    }
                  else
                    {
                      displayvalueslength += strlen (ll->word->word) + 1;
                      displayvaluescount++;
                    }
                }
              l = ll;
              goto next;
            }
          CHECKFORSTRINGARG ("+hinttext", hinttext)
            CHECKFORSTRINGARG ("+helptext", helptext)
          else
            {
              /* Should follow list of field names */
              break;
            }

          l = l->next;
        next:
          /* l progressed */
          ;
        }
    }

  list = l;
  if (list == 0)
    {
      builtin_usage ();
      return (EX_USAGE);
    }

  /* Check for each display value there is a value */
  if (displayvaluescount > 0 && valuescount != displayvaluescount)
    {
      builtin_error
        ("%s: 'values' and 'displayvalues' must have same number of values",
         l->word->word);
      return (EX_USAGE);
    }

  /* is fieldspec already defined */
  cs = fieldspec_search (l->word->word);

  if (cs)
    {
      if (fieldspec_remove (l->word->word))
        {
          builtin_warning ("%s:  fieldspec already exists - replacing",
                           l->word->word);
        }
      else
        {
          builtin_error ("%s: fieldspec already exists and in use",
                         l->word->word);
          return (EXECUTION_FAILURE);
        }
    }

  /* If we get here, we need to build a fieldspec and add it for each
     remaining argument. */
  cs = fieldspec_create ();

  cs->valuescount = valuescount;

  if (fieldtype && *fieldtype)
    {
      if (strcmp (fieldtype, "positional") == 0)
        cs->fieldtype = CF_FIELD_TYPE_POSITIONAL;
      else if (strcmp (fieldtype, "flag") == 0)
        cs->fieldtype = CF_FIELD_TYPE_FLAG;
      else if (strcmp (fieldtype, "last") == 0)
        cs->fieldtype = CF_FIELD_TYPE_LAST;
      else if (strcmp (fieldtype, "rest") == 0)
        cs->fieldtype = CF_FIELD_TYPE_REST;
      else if (strcmp (fieldtype, "uptolast") == 0)
        cs->fieldtype = CF_FIELD_TYPE_UPTOLAST;
      else if (strcmp (fieldtype, "flagwithvalue") == 0)
        cs->fieldtype = CF_FIELD_TYPE_FLAGWITHVALUE;
      else
        {
          free (cs);
          builtin_error ("%s: Invalid field type", fieldtype);
          return (EX_USAGE);
        }
    }
  else
    cs->fieldtype = CF_FIELD_TYPE_POSITIONAL;

  cs->hinttext = STRDUP (hinttext);
  cs->helptext = STRDUP (helptext);
  if (label)
    cs->label = STRDUP (label);
  else
    cs->label = STRDUP (list->word->word);


  if (valuescount > 0)
    {
      cs->values =
        xmalloc ((unsigned int) ((valuescount + 1) * sizeof (char *)));
      cs->values[0] = xmalloc ((unsigned int) valueslength);

      op = cs->values[0];
      for (i = 0, ll = valueslist; ll->next; i++, ll = ll->next)
        {
          if (ll->word->word[0] == '+')
            break;
          else if (ll->word->word[0] == '\\')
            ip = ll->word->word + 1;
          else
            ip = ll->word->word;
          cs->values[i] = op;

          while ((*op++ = *ip++));

        }
      cs->values[i] = 0;
    }

  if (displayvaluescount > 0)
    {
      cs->displayvalues =
        xmalloc ((unsigned int) ((displayvaluescount + 1) * sizeof (char *)));
      cs->displayvalues[0] = xmalloc ((unsigned int) displayvalueslength);

      op = cs->displayvalues[0];
      for (i = 0, ll = displayvalueslist; ll->next; i++, ll = ll->next)
        {
          if (ll->word->word[0] == '+')
            break;
          else
            {
              ip = ll->word->word;
              cs->displayvalues[i] = op;
              while ((*op++ = *ip++));
            }

        }
      cs->displayvalues[i] = 0;
    }
  else
    {
      /* Have displayvalues point to same place 
         Note: When freeing fieldspec must check before freeing displayvalues */
      cs->displayvalues = cs->values;
    }

  cs->compspec = STRDUP (compspec);
  cs->separator = STRDUP (separator);
  cs->flag = STRDUP (flag);

  if (fieldspec_insert (list->word->word, cs) == 0)
    return (EXECUTION_FAILURE);
  else
    return (EXECUTION_SUCCESS);

usage_error:
  /* XXXXXX */
  return EX_USAGE;
}

static int
formspec_printitem (item)
     BUCKET_CONTENTS *item;
{
  FORMSPEC *formspec;
  char *formname;

  formname = item->key;
  formspec = (FORMSPEC *) item->data;

  return (formspec_print (formname, formspec));
}

/*
  Print all form specifiers by walking hash
 */
static void
formspec_printall ()
{
  formspecs_walk (formspec_printitem);
}

/*
  Print a list of form specifiers
 */
static int
formspec_printlist (list)
     WORD_LIST *list;
{
  WORD_LIST *l;
  FORMSPEC *cs;
  int ret;

  for (ret = EXECUTION_SUCCESS, l = list; l; l = l->next)
    {
      cs = formspec_search (l->word->word);
      if (cs)
        formspec_print (l->word->word, cs);
      else
        {
          builtin_error ("%s: no formspec specification", l->word->word);
          ret = EXECUTION_FAILURE;
        }
    }
  return (ret);
}

/*
  Remove all form specifiers
 */
static int
formspec_removeall (list)
     WORD_LIST *list;
{

  WORD_LIST *l;
  int ret;

  for (ret = EXECUTION_SUCCESS, l = list; l; l = l->next)
    {
      if (formspec_remove (l->word->word) == 0)
        {
          builtin_error ("%s: no formspec specification", l->word->word);
          ret = EXECUTION_FAILURE;
        }
    }
  return ret;
}

/* Build display list
     EX_USAGE = bad option
     EXECUTION_SUCCESS = some options supplied
     EXECUTION_FAILURE = no options supplied
*/

static int
build_displaylevel (displaylevelname, displaylevel, list)
     char *displaylevelname;
     DISPLAYLEVEL **displaylevel;
     WORD_LIST **list;
{
  int rval;
  DISPLAYLEVEL *dl;
  WORD_LIST *l;
  WORD_LIST *ll;
  WORD_LIST *lll;
  WORD_LIST *screenfieldlist = (WORD_LIST *) 0;
  WORD_LIST *generationfieldlist = (WORD_LIST *) 0;
  int screenfieldcount = 0;
  int generationfieldcount = 0;
  int i;
  int j;

  dl = 0;

  for (l = *list; l;)
    {

      if (strcmp ("+screenfieldlist", l->word->word) == 0)
        {
          /* Count screenfieldlist */
          screenfieldlist = l->next;
          for (ll = l->next; ll; ll = ll->next)
            {
              if (ll->word->word[0] == '+')
                {
                  l = ll;
                  goto next;
                }
              else
                screenfieldcount++;
              if ((FIELDSPEC *) 0 == fieldspec_search (ll->word->word))
                {
                  builtin_error ("%s: Invalid field name", ll->word->word);
                  goto usage_error;
                }
            }
          l = ll;
        }
      else if (strcmp ("+generationfieldlist", l->word->word) == 0)
        {
          /* Count generationfieldlist */
          generationfieldlist = l->next;
          for (ll = l->next; ll; ll = ll->next)
            {
              if (ll->word->word[0] == '+')
                {
                  l = ll;
                  goto next;
                }
              else
                generationfieldcount++;
              if ((FIELDSPEC *) 0 == fieldspec_search (ll->word->word))
                {
                  builtin_error ("%s: Invalid field name", ll->word->word);
                  goto usage_error;
                }
            }
          l = ll;
        }
      else if (strncmp ("+displaylevel=", l->word->word,
                        strlen ("+displaylevel=")) == 0)
        {
          break;
        }
      else if (strcmp ("+command", l->word->word) == 0 ||
               strcmp ("+formname", l->word->word) == 0)
        {
          break;
        }
      l = l->next;
    next:
      ;

    }
  /* Progress list pointer */
  *list = l;

  /* Check that every screen list entry has a generation list entry */
  if (generationfieldlist != (WORD_LIST *) 0)
    {
      if (screenfieldcount != generationfieldcount)
        {
          builtin_error
            (": screen field count (%d) != generation field count (%d)",
             screenfieldcount, generationfieldcount);
          goto usage_error;
        }
      for (i = 0, ll = screenfieldlist; i < screenfieldcount;
           i++, ll = ll->next)
        {
          for (j = 0, lll = generationfieldlist; j < generationfieldcount;
               j++, lll = lll->next)
            {
              if (0 == strcmp (ll->word->word, lll->word->word))
                break;
            }
          if (lll == (WORD_LIST *) 0)
            {
              builtin_error ("%s: screen list item not in generation list ",
                             ll->word->word);
              goto usage_error;
            }
        }
    }
  /* If we get here, we need to build a displaylevel and add it for each
     remaining argument. */
  dl = displaylevel_create ();
  dl->displaylevel = displaylevelname;

  /* Allocate space for field lists */
  dl->screenfieldlist =
    (FORMFIELDSPEC **) xmalloc (sizeof (FORMFIELDSPEC *) *
                                (screenfieldcount + 1));
  memset (dl->screenfieldlist, 0,
          sizeof (FORMFIELDSPEC *) * (screenfieldcount + 1));
  dl->generationfieldlist =
    (FORMFIELDSPEC **) xmalloc (sizeof (FORMFIELDSPEC *) *
                                (generationfieldcount + 1));
  memset (dl->generationfieldlist, 0,
          sizeof (FORMFIELDSPEC *) * (generationfieldcount + 1));

  for (i = 0, ll = screenfieldlist; i < screenfieldcount; i++, ll = ll->next)
    {
      dl->screenfieldlist[i] =
        (FORMFIELDSPEC *) xmalloc (sizeof (FORMFIELDSPEC));
      dl->screenfieldlist[i]->fieldspec = fieldspec_search (ll->word->word);
      dl->screenfieldlist[i]->fieldspecname = savestring (ll->word->word);
      dl->screenfieldlist[i]->crosslink = 0;
      fieldspec_retain (dl->screenfieldlist[i]->fieldspec);
      if (generationfieldcount == 0)
        {
          dl->generationfieldlist[i] =
            (FORMFIELDSPEC *) xmalloc (sizeof (FORMFIELDSPEC));
          dl->generationfieldlist[i]->fieldspec =
            fieldspec_search (ll->word->word);
          dl->generationfieldlist[i]->fieldspecname =
            savestring (ll->word->word);
          dl->generationfieldlist[i]->crosslink = 0;
        }
    }
  dl->screenfieldlist[screenfieldcount] = (FORMFIELDSPEC *) 0;

  if (generationfieldcount != 0)
    for (i = 0, ll = generationfieldlist; i < generationfieldcount;
         i++, ll = ll->next)
      {
        dl->generationfieldlist[i] =
          (FORMFIELDSPEC *) xmalloc (sizeof (FORMFIELDSPEC));
        dl->generationfieldlist[i]->fieldspec =
          fieldspec_search (ll->word->word);
        dl->generationfieldlist[i]->fieldspecname =
          savestring (ll->word->word);
        dl->generationfieldlist[i]->crosslink = 0;
      }
  dl->generationfieldlist[screenfieldcount] = (FORMFIELDSPEC *) 0;
  dl->fieldcount = screenfieldcount;

  /* Cross link screen and generation lists */
  for (i = 0; i < screenfieldcount; i++)
    {
      /* Look for match generation field by matching fieldspec */
      for (j = 0; j < screenfieldcount; j++)
        {
          if (dl->screenfieldlist[i]->fieldspec
              == dl->generationfieldlist[j]->fieldspec)
            {
              /* If generation field list entry not linked */
              if (dl->generationfieldlist[j]->crosslink == 0)
                {
                  /* Cross link field list entries */
                  dl->generationfieldlist[j]->crosslink =
                    dl->screenfieldlist[i];
                  dl->screenfieldlist[i]->crosslink =
                    dl->generationfieldlist[j];
                  break;
                }
              /* Otherwise look for next match ie duplicate fieldspecs */
            }
        }
      if (j == screenfieldcount)
        {
          /* OUCH - deep error */

          builtin_error
            ("%s: Fields in screenfieldlist and generationfieldlist do no match (unmatch duplicate)",
             dl->screenfieldlist[i]->fieldspecname);
          goto usage_error;
        }
    }
  *displaylevel = dl;


  return (EXECUTION_SUCCESS);

usage_error:
  if (dl)
    displaylevel_dispose (dl);
  builtin_usage ();
  return EX_USAGE;
}

$BUILTIN formspec
$DEPENDS_ON COMMAND_FORMS
$FUNCTION formspec_builtin
$SHORT_DOC formspec +displaylevel=displaylevelname +screenfieldlist fieldname ...  
+generationfieldlist fieldname ...+command cmd +formname formname ... 
formspec -p [formname ...]
formspec -r [formname ...] 
  
This command creates a named form specification. Running the command
"form" specifying a form specification name will display the entry form defined 
for entry of command arguments.

A form specification is organised into display levels. For each display level
there is a screen field list and a generation field list. The fields specified
can be different for each display level allowing a user to cycle through 
different display levels to display the level of detail they require. 

+screenfieldlist fieldname ...
The screen field list for each display level identifies the fields to display
at that display level.

+generationfieldlist fieldname ... 
The corresponding generation field list contains the same fields in the order 
that they appear in the generated command line.

+command cmd
Identifies the command.

+formname formname ...
Specifies the name of the form specification. A form specification can be know
by a number of names.

-r [formname ...]
Remove form specifications. With no arguments remove all form specifications.
Otherwise remove the named form specifications.

-p [formname ...]
Print form specicications. With no arguments print all form specifications.
Otherwise print the named form specifications

$END

/* Add, remove, and display form specifiers. */
int
formspec_builtin (list)
     WORD_LIST *list;
{
  int rval;
  FORMSPEC *fs;
  WORD_LIST *l;
  WORD_LIST *ll;
  WORD_LIST *lll;
  char *formname;
  char *command;
  char *displaylevelname;
  DISPLAYLEVEL *displaylevel;

  int pflag = 0;
  int rflag = 0;

  int displaylevelcount = 0;

  int i;
  int j;


  command = NULL;
  formname = NULL;

  if (list == 0)
    {
      formspec_printall ();
      return (EXECUTION_SUCCESS);
    }

  /* formspec -p <formspec name> ... */
  if (strcmp ("-p", list->word->word) == 0)
    {
      l = list->next;
      if (l == 0)
        {
          formspec_printall ();
          return (EXECUTION_SUCCESS);
        }
      else
        return (formspec_printlist (l));

    }
  /* formspec -r <formspec name > ... */
  else if (strcmp ("-r", list->word->word) == 0)
    {
      l = list->next;
      if (l == 0)
        {
          formspecs_flush ();
          return (EXECUTION_SUCCESS);
        }
      else
        return (formspec_removeall (l));
    }
  else
    {
      /* Count the display levels */
      for (l = list; l;)
        {
          if (strncmp ("+displaylevel", l->word->word,
                       strlen ("+displaylevel")) == 0)
            {
              if (strchr (l->word->word, '=') == 0)
                {
                  builtin_error
                    (": displaylevel requires name (+displaylevel=<name>)");
                  builtin_usage ();
                  return (EX_USAGE);
                }
              displaylevelcount++;
            }
          CHECKFORSTRINGARG ("+command", command)
            CHECKFORSTRINGARG ("+formname", formname)
          l = l->next;
        next:
          ;

        }
    }

  if (formname == 0)
    {
      builtin_error ("no formname");
      builtin_usage ();
      return (EX_USAGE);
    }

  /* If we get here, we need to build a formspec and add it for each
     remaining argument. */
  fs = formspec_create ();

  fs->displaylevelcount = displaylevelcount;
  fs->displaylevels =
    (DISPLAYLEVEL **) xmalloc (sizeof (DISPLAYLEVEL *) *
                               (displaylevelcount + 1));

  i = 0;
  for (l = list; l;)
    {
      if (strncmp ("+displaylevel=", l->word->word,
                   strlen ("+displaylevel=")) == 0)
        {
          if (strchr (l->word->word, '=') == 0)
            {
              builtin_error
                (": displaylevel requires name (+displaylevel=<name>)");
              builtin_usage ();
              return (EX_USAGE);
            }
          displaylevelname = STRDUP (strchr (l->word->word, '=') + 1);
          l = l->next;
          rval = build_displaylevel (displaylevelname, &displaylevel, &l);
          if (rval == EXECUTION_SUCCESS)
            {
              fs->displaylevels[i++] = displaylevel;
            }
          else
            return rval;
        }
      else
        {
          l = l->next;
        }
    }
  if (i != displaylevelcount)
    {
      /* XXXXX internal error */
      builtin_error (": unexpected number of display levels %d expected %d",
                     i, displaylevelcount);
      builtin_usage ();
      return (EX_USAGE);
    }
  fs->displaylevels[i] = NULL;

  fs->command = command;


  if (formspec_insert (formname, fs) == 0)
    rval = EXECUTION_FAILURE;

  return (rval);

usage_error:
  formspec_dispose (fs);
  builtin_usage ();
  return EX_USAGE;
}

$BUILTIN form
$DEPENDS_ON COMMAND_FORMS
$FUNCTION form_builtin
$SHORT_DOC form [-x]  [-l] formname arg1 arg2 ..
Display the form for the command.

An on screen form is displayed for the entry of arguments for the command.

"formname" is the name a form specification defined previously with formspec.

The top line of the form displays the name of the form.

The second last line of the form displays the "display level" at the end of 
the line. A user can cycle through different versions or display levels of the
form using CTL-L. This redraws the form at a different display level.

The bottom line display a prompt for the current field or command completion 
alternatices.

The form consists of a number of fields. Fields are either positional or flags.

The user can use command completion to enter a field value. Alternatives 
are displayed on the bottom line of the form. Repeated command completion 
operations cycle through possible values.

The user moves from field to field using arrow keys or return. Entering return
the last positional field will complete the form.

Some fields allow a user to select from a number of alternatives using the 
left/right arrow keys, the space key or the first letter of the alternative.

The generated command line is inserted into the command line allowing
the user to edit the command and execute it.

Options:
-x   Causes the command line to be executed on form entry
-l   Entry of the form is line by line

$END

/* 
  Execute a form
 */
int
form_builtin (list)
     WORD_LIST *list;
{
  int rval;
  FORMSPEC *form;
  FORMFIELDSPEC **fieldlist;
  FIELDSPEC *field;
  FIELDSPEC *prevfield;
  SCREENFIELD *screenfield;
  SCREENFORM *screenform;
  WORD_LIST *l;
  int commandlength;
  char *command;
  char *form_name;
  char *cp;
  char *ip;
  int suppress_hint;
  char *argument;
  DISPLAYLEVEL **displaylevel;

  l = list;

  if (list == 0)
    return (EXECUTION_SUCCESS);

  if (!interactive)
    {
      builtin_error ("%s: Can only be run interactive", l->word->word);
      return (EXECUTION_FAILURE);
    }

  cf_edit_mode = CF_MODE_FORM;
  cf_execution_mode = CF_MODE_DISPLAY;

  for (l = list; l; l = l->next)
    {
      if (strcmp (l->word->word, "-l") == 0)
        cf_edit_mode = CF_MODE_LINE;
      else if (strcmp (l->word->word, "-x") == 0)
        cf_execution_mode = CF_MODE_EXECUTE;
      else if (l->word->word[0] != '-')
        break;
    }

  form_name = l->word->word;
  form = formspec_search (form_name);

  /* TODO If form not loaded then search form path and load form */

  /* Use form specification */
  if (form)
    {
      /* If no display levels do not display form */
      if (form->displaylevelcount == 0)
        return (EXECUTION_SUCCESS);
        
      /* Instansiate screenform */
      screenform = screenform_init (form, form->displaylevels[0], form_name);

      /* Layout form */
      screenform_layout (screenform);

      /* Parse the remaining arguments to populate field values */
      screenform_populatefieldsfrompartialcommand (screenform, l);

      /* Draw the form and position to first field */
      screenform_draw (screenform);

      /* Go to first field */
      screenform_gotofield (screenform, screenform->screenfields,
                            cf_edit_mode);

      /* Length of command plus space plus null */
      commandlength = strlen (form->command) + 2;

      /* Set global variable that will allow the 
         form navigation to be captured in the form edit code in readline */
      cf_screenform = screenform;

      /* Loop through fields */
      suppress_hint = 0;
      while (1)
        {
          field = screenform->currentscreenfield->fieldspec;

          /* Default next navigation to next field */
          screenform->nextnavigation = CF_RETURN;

          /* Display hint text */
          if (!suppress_hint)
            screenform_displayhinttext (screenform, cf_edit_mode);

          /* Edit the field */
          screenform_editscreenfield (screenform, cf_edit_mode);
          screenform->currenty++;

          /* Note:
             Keystroke functions in called from readline/form_mode.c use the gobal
             cf_screenform to set "nextnavigation".
             This use of side effects is to avoid changing the main
             call of "readline". */

          switch (screenform->nextnavigation)
            {
            case CF_NO_NAVIGATION:
              screenform_gotofield (screenform,
                                    screenform->currentscreenfield,
                                    cf_edit_mode);
              break;

            case CF_REDRAW:
              /* Redraw form */
              /* Go past end of current form */
              while ((screenform->currenty)++ < screenform->height)
                rl_crlf ();

              rl_crlf ();

              /* Cycle display level */
              for (displaylevel = screenform->formspec->displaylevels;
                   *displaylevel != 0; displaylevel++)
                {
                  if (*displaylevel == screenform->displaylevel)
                    {
                      displaylevel++;
                      break;
                    }
                }
              if (*displaylevel == 0)
                displaylevel = screenform->formspec->displaylevels;

              /* Re-layout and draw form */
              screenform_dispose (screenform);
              screenform = screenform_init (form, *displaylevel, form_name);
              cf_screenform = screenform;

              screenform_layout (screenform);
              screenform_populatefieldsfrompartialcommand (screenform, l);
              screenform_draw (screenform);

              /* Go to first field */
              screenform_gotofield (screenform, screenform->screenfields,
                                    cf_edit_mode);
              break;

            case CF_RETURN:
              /* Move to next field or 
                 if last field or 
                 last positional field complete form */
              if (screenform->currentscreenfield <
                  ((screenform->fieldcount - 1) + screenform->screenfields)
                  && (screenform->currentscreenfield->fieldspec->fieldtype !=
                      CF_FIELD_TYPE_LAST
                      && screenform->currentscreenfield->
                      fieldspec->fieldtype != CF_FIELD_TYPE_REST))
                {
                  if (0 ==
                      screenform_gotonextfield (screenform, cf_edit_mode))
                    goto complete;
                }
              else
                /* Last field */
                goto complete;
              break;

            case CF_NEXT_FIELD:
              /* Navigate to next field */
              if (0 == screenform_gotonextfield (screenform, cf_edit_mode))
                {
                  /* already on last field */
                  suppress_hint = 1;
                  continue;
                }
              break;
            case CF_PREVIOUS_FIELD:
              /* If not on field field move to previous field */
              screenform_gotopreviousfield (screenform, cf_edit_mode);
              break;

            case CF_ENTER:
            case CF_ESCAPE:
              goto complete;
              break;

            }
          suppress_hint = 0;
        }

    complete:

      /* Go to last line */
      if (cf_edit_mode != CF_MODE_LINE)
        {
          while ((screenform->currenty)++ < screenform->height)
            rl_crlf ();
        }

      /* Construct command string */

      /* 1. Determine command length */
      for (fieldlist = screenform->displaylevel->generationfieldlist;
           *fieldlist; fieldlist++)
        {
          field = (*fieldlist)->fieldspec;
          screenfield = (*fieldlist)->screenfield;
          commandlength += screenfield_generatedargumentlength (screenfield);
        }

      /* 2. Start with command name */

      command = xmalloc ((unsigned int) commandlength);
      cp = command;
      ip = form->command;
      while ((*cp++ = *ip++));
      cp--;
      *cp++ = ' ';

      /* 3. loop through the generate field list to construct command arguments */
      prevfield = field;
      for (fieldlist = screenform->displaylevel->generationfieldlist;
           *fieldlist; fieldlist++)
        {
          field = (*fieldlist)->fieldspec;
          screenfield = (*fieldlist)->screenfield;
          argument = screenfield_generateargument (screenfield);

          if (argument)
            {
              /* If a separator is defined and it is the 
                 same as the separator of the previous field */
              if (field->separator
                  && prevfield && prevfield->separator
                  && strcmp (prevfield->separator, field->separator) == 0)
                {
                  ip = field->separator;
                  while ((*cp++ = *ip++));
                  cp--;
                }
              else
                *cp++ = ' ';
              ip = argument;
              while ((*cp++ = *ip++));
              cp--;
              free (argument);
              prevfield = field;
            }
        }
      *cp = '\0';
      /* Note that command already null terminated */

      cf_screenform = NULL;
      screenform_dispose (screenform);

      rl_crlf ();
      if (cf_execution_mode == CF_MODE_DISPLAY)
        {
          bash_re_edit (command);
          free (command);
        }
      else if (cf_execution_mode == CF_MODE_EXECUTE)
        {
          /* Execute the command */
          fprintf (stderr, "%s\n", command);
          /* Note: command is freed */
          return parse_and_execute (command, "form", 0);
        }

    }
  else
    {
      builtin_error ("%s: no such formspec specification",
                         l->word->word);
      return (EXECUTION_FAILURE);
    }
  rval = EXECUTION_SUCCESS;
  return (EXECUTION_SUCCESS);
}
